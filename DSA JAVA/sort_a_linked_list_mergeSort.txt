import java.util.*;
import java.lang.*;

class Node {
    public int val;
    public Node next;
    Node()
    {
        this.val = 0;
        this.next = null;
    }
    
    Node(int val)
    {
        this.val = val;
        this.next = null;
    }
    
    Node(int val, Node n)
    {
        this.val = val;
        this.next = n;
    }
}

class LL {
    public Node head;
    public Node tail;
    LL()
    {
          this.head = null;
          this.tail = null;
    }
    
    LL(Node head)
    {
        if(head == null)
        {
            this.head = null;
            this.tail = null;
            return;
        }
        this.head = head;
        Node tmp = head;
        while(tmp.next != null)
        {
            tmp = tmp.next;
        }
        this.tail = tmp;
    }
    
    public void add(int n)
    {
        if(this.head == null && this.tail == null)
        {
            this.head = new Node(n);
            this.tail = this.head;
            return;
        }
        Node newNode = new Node(n);
        Node tmp = this.head;
        while(tmp.next != null)
        {
            tmp = tmp.next;
        }
        tmp.next = newNode;
        this.tail = newNode;
    }
    
    public void printList()
    {
        Node tmp = this.head;
        System.out.print("[ ");
        while(tmp != null)
        {
            System.out.print(tmp.val+" ");
            tmp = tmp.next;
        }
        System.out.println("]");
    }
    
}


class Main {
    public static void main(String[] args) {
        LL list = new LL();
        list.add(3);
        list.add(4);
        list.add(2);
        list.add(1);
        list.add(5);
        
        list.printList();
        Node newHead = mergeSort(list.head);
        LL sortedList = new LL(newHead);
        sortedList.printList();
    }
    
    static Node merge(Node left, Node right)
    {
        Node dummy = new Node(-1);
        Node tmp = dummy;
        
        while(left != null && right != null)
        {
            if(left.val <= right.val)
            {
                tmp.next = left;
                left=left.next;
            }
            else{
                tmp.next = right;
                right = right.next;
            }
            tmp = tmp.next;
        }
        
        if(left != null)
        {
            tmp.next = left;
        }
        
        if(right != null)
        {
            tmp.next = right;
        }
        
        return dummy.next;
        
    }
    
    static Node findMid(Node head)
    {
        if(head == null || head.next == null)
        {
            return head;
        }
        
        Node fast = head.next;
        Node slow = head;
        
        while(fast != null && fast.next != null)
        {
            fast = fast.next.next;
            slow = slow.next;
            
        }
        return slow;
    }
    
    static Node mergeSort(Node head)
    {
       if(head == null || head.next == null)
       {
           return head;
       }
       
       Node mid = findMid(head);
       
       Node right = mid.next;
       mid.next = null;
       Node left = head;
       
       left = mergeSort(left);
       right = mergeSort(right);
       
       return merge(left,right);
       
    }
    
    
    
    
   
    
    //---------------------- STATIC CODE--------------------------
    
    @SuppressWarnings("unchecked")
    static void print2DArray(int[][] arr)
    {
         System.out.println("[");
        for(int[] row : arr)
        {
            System.out.print("[ ");
            for(int i = 0; i < row.length; i++)
            {
                if(i == row.length-1)
                {
                    System.out.print(row[i]);
                }else{
                    System.out.print(row[i]+", ");
                }
            }
            System.out.println(" ],");
        }
        System.out.println("]");
    }
    
    @SuppressWarnings("unchecked")
    static<T> void print2DList(List<List<T>> list){
        System.out.println("[");
        for(List<T> lst : list)
        {
            System.out.print("[ ");
            for(int i = 0; i < lst.size(); i++)
            {
                if(i == lst.size()-1)
                {
                    System.out.print(lst.get(i));
                }else{
                    System.out.print(lst.get(i)+", ");
                }
            }
            System.out.println(" ],");
        }
        System.out.println("]");
    }
    
    @SuppressWarnings("unchecked")
    static<T> void printList(List<T> list)
    {
        System.out.print("[ ");
        for(int i = 0; i < list.size(); i++)
        {
            if(i == list.size()-1)
            {
                System.out.print(list.get(i));
            }else{
                System.out.print(list.get(i)+", ");
            }
        }
        System.out.println(" ]");
    }
    
    @SuppressWarnings("unchecked")
    static<T> void print(T val, T ...vals)
    {
        try{
        StringBuilder sb = new StringBuilder();
        sb.append(val);
        if(vals.length > 0)
        {
            
        
        for(T v : vals)
        {
            sb.append(" ");
            sb.append(v);
        }
        }
        System.out.println(sb.toString());
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }

}
