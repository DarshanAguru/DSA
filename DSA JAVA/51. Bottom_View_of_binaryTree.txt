import java.lang.*;
import java.util.*;
import java.util.stream.*;

class Pair<K,V>{

    K key;
    V value;
    Pair(K key, V value)
    {
        this.key = key;
        this.value = value;
    }
    
    public K getKey()
    {
        return this.key;
    }
    
    public V getValue()
    {
        return this.value;
    }
    
}


class Node{
    
    public Node left, right;
    public int val;
    Node(int val)
    {
        this.val = val;
        this.left = null;
        this.right = null;
    }
    
    
}

class Main {
    static int dia;
    public static void main(String[] args) {
       
        Node root = new Node(1);
        root.left = new Node(2);
        root.left.left = new Node(4);
        root.left.left.right = new Node(5);
        root.left.left.right.right = new Node(6);
        root.left.right = new Node(10);
        root.right = new Node(3);
        root.right.left = new Node(9);
        root.right.right = new Node(11);
        
        
        List<Integer> res = getBottomViewOfTree(root);
        
        printList(res);
        
    }
    
    static List<Integer> getBottomViewOfTree(Node root)
    {
        List<Integer> res  = new ArrayList<>();
        
        if(root == null)
        {
            return res;
            
        }
        
        Map<Integer, Integer> mapp = new TreeMap<>();
        
        Queue<Pair<Node, Integer>> q = new LinkedList<>();
        
        q.add(new Pair(root , 0));
        
        while(!q.isEmpty())
        {
            Pair<Node, Integer> p = q.poll();
            Node node = p.getKey();
            int l = p.getValue();
            
            mapp.put(l, node.val);
            
            if(node.left != null)
            {
                q.add(new Pair(node.left, l-1));
            }
            if(node.right != null)
            {
                q.add(new Pair(node.right , l+1));
            }
        }
        
        for(Map.Entry<Integer, Integer> entry : mapp.entrySet())
        {
            res.add(entry.getValue());   
        }
        
        return res;
    }
    
    
    //---------------------- STATIC CODE--------------------------
    
    @SuppressWarnings("unchecked")
    static void print2DArray(int[][] arr)
    {
         System.out.println("[");
        for(int[] row : arr)
        {
            System.out.print("[ ");
            for(int i = 0; i < row.length; i++)
            {
                if(i == row.length-1)
                {
                    System.out.print(row[i]);
                }else{
                    System.out.print(row[i]+", ");
                }
            }
            System.out.println(" ],");
        }
        System.out.println("]");
    }
    
    
    @SuppressWarnings("unchecked")
    static<T> void print2DList(List<List<T>> list){
        System.out.println("[");
        for(List<T> lst : list)
        {
            System.out.print("[ ");
            for(int i = 0; i < lst.size(); i++)
            {
                if(i == lst.size()-1)
                {
                    System.out.print(lst.get(i));
                }else{
                    System.out.print(lst.get(i)+", ");
                }
            }
            System.out.println(" ],");
        }
        System.out.println("]");
    }
    
    
    
    @SuppressWarnings("unchecked")
    static<T> void printList(List<T> list)
    {
        System.out.print("[ ");
        for(int i = 0; i < list.size(); i++)
        {
            if(i == list.size()-1)
            {
                System.out.print(list.get(i));
            }else{
                System.out.print(list.get(i)+", ");
            }
        }
        System.out.println(" ]");
    }
    
    @SuppressWarnings("unchecked")
    static<T> void print(T val, T ...vals)
    {
        try{
        StringBuilder sb = new StringBuilder();
        sb.append(val);
        if(vals.length > 0)
        {
            
        
        for(T v : vals)
        {
            sb.append(" ");
            sb.append(v);
        }
        }
        System.out.println(sb.toString());
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }

}