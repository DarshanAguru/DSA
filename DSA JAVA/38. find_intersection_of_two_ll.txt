// Online Java Compiler
// Use this editor to write, compile and run your Java code online
import java.util.*;
import java.lang.*;

class Node {
    public int val;
    public Node next;
    Node()
    {
        this.val = 0;
        this.next = null;
    }
    
    Node(int val)
    {
        this.val = val;
        this.next = null;
    }
    
    Node(int val, Node n)
    {
        this.val = val;
        this.next = n;
    }
}

class LL {
    public Node head;
    public Node tail;
    LL()
    {
          this.head = null;
          this.tail = null;
    }
    
    LL(Node head)
    {
        if(head == null)
        {
            this.head = null;
            this.tail = null;
            return;
        }
        this.head = head;
        Node tmp = head;
        while(tmp.next != null)
        {
            tmp = tmp.next;
        }
        this.tail = tmp;
    }
    
    public void add(int n)
    {
        if(this.head == null && this.tail == null)
        {
            this.head = new Node(n);
            this.tail = this.head;
            return;
        }
        Node newNode = new Node(n);
        Node tmp = this.head;
        while(tmp.next != null)
        {
            tmp = tmp.next;
        }
        tmp.next = newNode;
        this.tail = newNode;
    }
    
    public void printList()
    {
        Node tmp = this.head;
        System.out.print("[ ");
        while(tmp != null)
        {
            System.out.print(tmp.val+" ");
            tmp = tmp.next;
        }
        System.out.println("]");
    }
    
}


class Main {
    public static void main(String[] args) {
        
        LL a = new LL();
        a.add(1);
        a.add(3);
        a.add(1);
        a.tail.next = new Node(2);
        a.tail = a.tail.next;
        LL b = new LL();
        b.add(3);
        b.tail.next = a.tail;
        
        a.tail.next = new Node(4);
        
        a.printList();
        b.printList();
        
        int lenA = findLength(a.head);
        int lenB = findLength(b.head);
        
        int diff = Math.abs(lenA-lenB);
        Node tmpA = a.head;
        Node tmpB = b.head;
        while(diff> 0)
        {
            if(lenA > lenB)
            {
                tmpA = tmpA.next;
                diff--;
            }
            if (lenB > lenA)
            {
                tmpB = tmpB.next;
                diff--;
            }
        }
        print(tmpA.next.val);
        // Set<Node> hs = new HashSet<>();
        // Node tmp = a.head;
        // while(tmp != null)
        // {
        //     hs.add(tmp);
        //     tmp = tmp.next;
        // }
        
        // int val = -1;
        // tmp = b.head;
        // while(tmp != null)
        // {
        //     if(hs.contains(tmp))
        //     {
        //         val = tmp.val;
        //         break;
        //     }
        //     tmp = tmp.next;
        // }
        // if(val == -1)
        // {
        //     print("null");
        // }
        // else{
        //     print(val);
        // }
    }
    
    
    static int findLength(Node head)
    {
        Node tmp = head;
        int cnt = 0;
        while(tmp!= null)
        {
            tmp = tmp.next;
            cnt++;
        }
        return cnt;
    }
    
    
    
   
    
    //---------------------- STATIC CODE--------------------------
    
    @SuppressWarnings("unchecked")
    static void print2DArray(int[][] arr)
    {
         System.out.println("[");
        for(int[] row : arr)
        {
            System.out.print("[ ");
            for(int i = 0; i < row.length; i++)
            {
                if(i == row.length-1)
                {
                    System.out.print(row[i]);
                }else{
                    System.out.print(row[i]+", ");
                }
            }
            System.out.println(" ],");
        }
        System.out.println("]");
    }
    
    @SuppressWarnings("unchecked")
    static<T> void print2DList(List<List<T>> list){
        System.out.println("[");
        for(List<T> lst : list)
        {
            System.out.print("[ ");
            for(int i = 0; i < lst.size(); i++)
            {
                if(i == lst.size()-1)
                {
                    System.out.print(lst.get(i));
                }else{
                    System.out.print(lst.get(i)+", ");
                }
            }
            System.out.println(" ],");
        }
        System.out.println("]");
    }
    
    @SuppressWarnings("unchecked")
    static<T> void printList(List<T> list)
    {
        System.out.print("[ ");
        for(int i = 0; i < list.size(); i++)
        {
            if(i == list.size()-1)
            {
                System.out.print(list.get(i));
            }else{
                System.out.print(list.get(i)+", ");
            }
        }
        System.out.println(" ]");
    }
    
    @SuppressWarnings("unchecked")
    static<T> void print(T val, T ...vals)
    {
        try{
        StringBuilder sb = new StringBuilder();
        sb.append(val);
        if(vals.length > 0)
        {
            
        
        for(T v : vals)
        {
            sb.append(" ");
            sb.append(v);
        }
        }
        System.out.println(sb.toString());
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }

}