import java.util.*;
import java.lang.*;

class Graph{
    
    Map<Integer, List<Integer>> map;
    
    Graph(){
        this.map = new HashMap<>();
    }
    
    public void addNode(int n)
    {
        this.map.putIfAbsent(n, new ArrayList<>() );
    }
    
    public void addEdge(int s, int d)
    {
        this.addNode(s);
        this.addNode(d);
        this.map.get(s).add(d);
        this.map.get(d).add(s);
    }
    
    public List<Integer> getNeighbor(int n)
    {
        return this.map.getOrDefault(n, new ArrayList<>());
    }
    
     public void printGraph() {
            for (Map.Entry<Integer, List<Integer>> entry : map.entrySet()) {
                System.out.println("Vertex " + entry.getKey() + " neighbors: " + entry.getValue());
            }
        }
    
}

class Main {
    public static void main(String[] args) {
        
        int N = 4;
        int M = 3;
        int E = 5;
        
        int[][] edges = {
            {0,1},{1,2},{2,3},{3,0},{0,2}
        };
        
        Graph graph = convertToGraph(edges);
        
        int color[] = new int[N];
        int ans = colorGraph(0, graph, color, N, M);
        print(ans);
        
    }
    
    
    static boolean isSafe(int node, Graph graph , int[] color, int n, int c)
    {
        for(int i : graph.getNeighbor(node))
        {
            if(color[i] == c)
            {
                return false;
            }
        }
        return true;
    }
    
    static int colorGraph(int node, Graph graph, int[] color, int N, int M)
    {
        
       if(node == N) return 1;
        
        for(int i = 1; i <= M; i++)
        {
            if(isSafe(node, graph, color, N, i))
            {
                color[node] =  i;
                if( colorGraph(node+1, graph, color , N, M) == 1)
                {
                    return 1;
                }
                color[node]=0;
            }
        }
        return 0;
        
    }
    
    
    static Graph convertToGraph(int[][] edges)
    {
        Graph graph = new Graph();
        for(int i = 0; i < edges.length; i++)
        {
            graph.addEdge(edges[i][0], edges[i][1]);
        }
        return graph;
    }
    
   
    
    //---------------------- STATIC CODE--------------------------
    
    @SuppressWarnings("unchecked")
    static void print2DArray(int[][] arr)
    {
         System.out.println("[");
        for(int[] row : arr)
        {
            System.out.print("[ ");
            for(int i = 0; i < row.length; i++)
            {
                if(i == row.length-1)
                {
                    System.out.print(row[i]);
                }else{
                    System.out.print(row[i]+", ");
                }
            }
            System.out.println(" ],");
        }
        System.out.println("]");
    }
    
    @SuppressWarnings("unchecked")
    static<T> void print2DList(List<List<T>> list){
        System.out.println("[");
        for(List<T> lst : list)
        {
            System.out.print("[ ");
            for(int i = 0; i < lst.size(); i++)
            {
                if(i == lst.size()-1)
                {
                    System.out.print(lst.get(i));
                }else{
                    System.out.print(lst.get(i)+", ");
                }
            }
            System.out.println(" ],");
        }
        System.out.println("]");
    }
    
    @SuppressWarnings("unchecked")
    static<T> void printList(List<T> list)
    {
        System.out.print("[ ");
        for(int i = 0; i < list.size(); i++)
        {
            if(i == list.size()-1)
            {
                System.out.print(list.get(i));
            }else{
                System.out.print(list.get(i)+", ");
            }
        }
        System.out.println(" ]");
    }
    
    @SuppressWarnings("unchecked")
    static<T> void print(T val, T ...vals)
    {
        try{
        StringBuilder sb = new StringBuilder();
        sb.append(val);
        if(vals.length > 0)
        {
            
        
        for(T v : vals)
        {
            sb.append(" ");
            sb.append(v);
        }
        }
        System.out.println(sb.toString());
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }

}