import java.lang.*;
import java.util.*;
import java.util.stream.*;


class Node{
    
    public Node left, right;
    public int val;
    Node(int val)
    {
        this.val = val;
        this.left = null;
        this.right = null;
    }
    
    
}

class Main {
    
    public static void main(String[] args) {
        
        int[] inorder = {40, 20, 50, 10, 60, 30};
        int[] preorder = {10, 20, 40, 50, 30, 60};
        
        Node root = constructTree(inorder, preorder);
        printTree(root);

    }
    
    static void printTree(Node root)
    {
        if(root == null)
        {
            return;
        }
        
        printTree(root.left);
        print(root.val);
        printTree(root.right);
    }

    static Node constructTree(int[] inorder, int[] preorder)
    {
        Map<Integer, Integer> mapp = new HashMap<>();
        
        for(int i = 0; i < inorder.length; i++)
        {
            mapp.put(inorder[i], i);
        }
        
        Node root = makeTree(preorder, 0, preorder.length -1 , inorder, 0, inorder.length-1, mapp);
        return root;
    }
    
    static Node makeTree(int[] preorder, int sp, int ep, int[] inorder, int si, int ei, Map<Integer, Integer> mapp)
    {
        if(sp > ep || si > ei)
        {
            return null;
        }
        
        Node root = new Node(preorder[sp]);
        
        int inorderIdx = mapp.get(root.val);
        
        int numsLeft = inorderIdx - si;
        
        root.left = makeTree(preorder, sp+1, sp+numsLeft, inorder, si, inorderIdx -1, mapp);
        
        root.right = makeTree(preorder,sp+numsLeft + 1, ep, inorder, inorderIdx + 1, ei, mapp );
        
        return root;
    }
    
   
    
    
    
    
    
    
/*-------------------------------------------------------------
                          STATIC CODE 
-------------------------------------------------------------*/
class Pair<K,V>{

    K key;
    V value;
    
    Pair()
    {
        this.key = null;
        this.value = null;
    }
    
    Pair(K key, V value)
    {
        this.key = key;
        this.value = value;
    }
    
    public void set(K key, V value)
    {
        this.key = key;
        this.value = value;
    }
    
    public K getKey()
    {
        return this.key;
    }
    
    public V getValue()
    {
        return this.value;
    }
    
}
    
    
    @SuppressWarnings("unchecked")
    static void print2DArray(int[][] arr)
    {
         System.out.println("[");
        for(int[] row : arr)
        {
            System.out.print("[ ");
            for(int i = 0; i < row.length; i++)
            {
                if(i == row.length-1)
                {
                    System.out.print(row[i]);
                }else{
                    System.out.print(row[i]+", ");
                }
            }
            System.out.println(" ],");
        }
        System.out.println("]");
    }
    
    
    @SuppressWarnings("unchecked")
    static<T> void print2DList(List<List<T>> list){
        System.out.println("[");
        for(List<T> lst : list)
        {
            System.out.print("[ ");
            for(int i = 0; i < lst.size(); i++)
            {
                if(i == lst.size()-1)
                {
                    System.out.print(lst.get(i));
                }else{
                    System.out.print(lst.get(i)+", ");
                }
            }
            System.out.println(" ],");
        }
        System.out.println("]");
    }
    
    
    
    @SuppressWarnings("unchecked")
    static<T> void printList(List<T> list)
    {
        System.out.print("[ ");
        for(int i = 0; i < list.size(); i++)
        {
            if(i == list.size()-1)
            {
                System.out.print(list.get(i));
            }else{
                System.out.print(list.get(i)+", ");
            }
        }
        System.out.println(" ]");
    }
    
    @SuppressWarnings("unchecked")
    static<T> void print(T val, T ...vals)
    {
        try{
        StringBuilder sb = new StringBuilder();
        sb.append(val);
        if(vals.length > 0)
        {
            
        
        for(T v : vals)
        {
            sb.append(" ");
            sb.append(v);
        }
        }
        System.out.println(sb.toString());
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }

}