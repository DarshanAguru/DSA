import java.lang.*;
import java.util.*;
import java.util.stream.*;

class Main {
    static int INF = (int)Math.pow(10,9);
    public static void main(String[] args) {
        
        int[][] matrix = {
            {5, 9, 6},
            {11, 5, 2},
        };
        
        int res = findMinPathSumMEMO(matrix, matrix.length, matrix[0].length);
        
        int res2 = findMinPathSumTAB(matrix, matrix.length, matrix[0].length);
        
        int res3 = findMinPathSumSO(matrix, matrix.length, matrix[0].length);
        
        print(res);
        print(res2);
        print(res3);
    
    }
    
    static int findMinPathSumSO(int[][] matrix, int n, int m)
    {
        int[] dp = new int[m];
        
        for(int i = 0; i < n; i++)
        {
            int[] temp = new int[m];
            for(int j = 0; j < m; j++)
            {
                if(i == 0 && j == 0)
                {
                    temp[j] = matrix[i][j];
                }
                else{
                   int up = matrix[i][j];
                   if(i > 0)
                   {
                       up += dp[j];
                   }
                   else{
                       up += INF;
                   }
                   
                   int left =  matrix[i][j];
                   if( j > 0)
                   {
                       left += temp[j-1];
                   }
                   else{
                       left += INF;
                   }
                   
                    temp[j] = Math.min(up,left);
                }
                
                
            }
            
            dp = temp;
        }
        return dp[m-1];
    }
    
    static int findMinPathSumTAB(int[][] matrix, int n , int m)
    {
        int[][] dp = new int[n][m];

        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j< m; j++)
            {
                if(i== 0 && j == 0)
                {
                    dp[i][j] = matrix[i][j];
                }
                else{
                    int up = matrix[i][j];
                    if(i > 0)
                    {
                        up += dp[i-1][j];
                    }else{
                        up += INF;
                    }
                    int left = matrix[i][j];
                    if(j > 0)
                    {
                        left += dp[i][j-1];
                    }else{
                        left+=INF;
                    }
                    dp[i][j] = Math.min(up,left);
                    
                }
            }
        }
        
        return dp[n-1][m-1];
    }
    
    static int findMinPathSumMEMO(int[][] matrix, int n, int m)
    {
        int[][] dp = new int[n][m];
        
        for(int[] row : dp)
        {
            Arrays.fill(row, -1);
        }
        
        return helper(matrix, n-1, m-1, dp);
    }
    
    static int helper(int[][] matrix, int i, int j, int[][] dp)
    {
        if(i == 0 && j == 0)
        {
            return matrix[0][0];
        }
        if( i < 0 || j < 0)
        {
            return INF;
        }
        
        if(dp[i][j] != -1)
        {
            return dp[i][j];
        }
        
        
        int up = matrix[i][j] + helper(matrix, i-1, j,dp);
        int left = matrix[i][j] + helper(matrix, i, j-1,  dp);
        return dp[i][j] = Math.min(up,left);
    }
    
    
    
    
    

/*-------------------------------------------------------------
                          STATIC CODE 
-------------------------------------------------------------*/

class Pair<K,V>{

    K key;
    V value;
    
    Pair()
    {
        this.key = null;
        this.value = null;
    }
    
    Pair(K key, V value)
    {
        this.key = key;
        this.value = value;
    }
    
    public void set(K key, V value)
    {
        this.key = key;
        this.value = value;
    }
    
    public K getKey()
    {
        return this.key;
    }
    
    public V getValue()
    {
        return this.value;
    }
    
}
    

    
    @SuppressWarnings("unchecked")
    static void print2DArray(int[][] arr)
    {
         System.out.println("[");
        for(int[] row : arr)
        {
            System.out.print("[ ");
            for(int i = 0; i < row.length; i++)
            {
                if(i == row.length-1)
                {
                    System.out.print(row[i]);
                }else{
                    System.out.print(row[i]+", ");
                }
            }
            System.out.println(" ],");
        }
        System.out.println("]");
    }
    
    
    @SuppressWarnings("unchecked")
    static<T> void print2DList(List<List<T>> list){
        System.out.println("[");
        for(List<T> lst : list)
        {
            System.out.print("[ ");
            for(int i = 0; i < lst.size(); i++)
            {
                if(i == lst.size()-1)
                {
                    System.out.print(lst.get(i));
                }else{
                    System.out.print(lst.get(i)+", ");
                }
            }
            System.out.println(" ],");
        }
        System.out.println("]");
    }
    
    
    
    @SuppressWarnings("unchecked")
    static<T> void printList(List<T> list)
    {
        System.out.print("[ ");
        for(int i = 0; i < list.size(); i++)
        {
            if(i == list.size()-1)
            {
                System.out.print(list.get(i));
            }else{
                System.out.print(list.get(i)+", ");
            }
        }
        System.out.println(" ]");
    }
    
    @SuppressWarnings("unchecked")
    static<T> void printnl(T val, T ...vals)
    {
       try{
        StringBuilder sb = new StringBuilder();
        sb.append(val);
        sb.append(" ");
        if(vals.length > 0)
        {
            
        
        for(T v : vals)
        {
            sb.append(" ");
            sb.append(v);
        }
        }
        System.out.print(sb.toString());
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }
    
    @SuppressWarnings("unchecked")
    static<T> void print(T val, T ...vals)
    {
        try{
        StringBuilder sb = new StringBuilder();
        sb.append(val);
        if(vals.length > 0)
        {
            
        
        for(T v : vals)
        {
            sb.append(" ");
            sb.append(v);
        }
        }
        System.out.println(sb.toString());
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }

}