import java.lang.*;
import java.util.*;
import java.util.stream.*;

class Main {
    
    public static void main(String[] args) {
    
        int[][] points = {{10, 40, 70},
                          {20, 50, 80},
                          {30, 60, 90}};
                          
        int res = ninjaTrainingMEMO(points, points.length);
        int res2 = ninjaTrainingTAB(points, points.length);
        int res3 = ninjaTrainingSO(points, points.length);
        print(res);
        print(res2);
        print(res3);
        
    }
    
    static int ninjaTrainingSO(int[][] points, int n)
    {
        int[] dp = new int[4];
        
        dp[0] = Math.max(points[0][1], points[0][2]);
        dp[1] = Math.max(points[0][0], points[0][2]);
        dp[2] = Math.max(points[0][0], points[0][1]);
        dp[3] = Math.max(points[0][0], Math.max(points[0][1],points[0][2]));
        
        for(int day = 1; day < n; day++)
        {
            int tmp[] = new int[4];
            for(int choice = 0; choice < 4; choice++)
            {
                tmp[choice] = 0;
                
                for(int i = 0; i <= 2; i++)
                {
                    if(i != choice)
                    {
                        tmp[choice] = Math.max(tmp[choice],points[day][i] + dp[i]);
                    }
                }
            }
            
            dp = tmp;
        }
        
        return dp[3];
    }
    
    static int ninjaTrainingTAB(int[][] points, int n)
    {
        int[][] dp = new int[n][4];
        
        dp[0][0] = Math.max(points[0][1], points[0][2]);
        dp[0][1] = Math.max(points[0][0], points[0][2]);
        dp[0][2] = Math.max(points[0][0], points[0][1]);
        dp[0][3] = Math.max(points[0][0], Math.max(points[0][1],points[0][2]));
        
        for(int day = 1; day < n; day++)
        {
            for(int choice = 0; choice< 4; choice++)
            {
                dp[day][choice] = 0;
                
                for(int i =0; i <=2; i++)
                {
                    if(i != choice)
                    {
                        int val = points[day][i] + dp[day-1][i];
                        dp[day][choice] = Math.max(dp[day][choice],val);
                    }
                }
            }
        }
        return dp[n-1][3];
    }
    
    static int ninjaTrainingMEMO(int[][] points, int n)
    {
        int[][] dp = new int[n][4];
        for(int[] row : dp)
        {
            Arrays.fill(row,-1);
        }
        
        return helper(n-1, 3, points, dp);
    }
    
    static int helper(int days, int lastChoice, int[][] points, int[][] dp)
    {
        if(dp[days][lastChoice] != -1) return dp[days][lastChoice];
        if(days == 0)
        {
            int maxx = 0;
            for(int i = 0; i <= 2; i++)
            {
                if(i != lastChoice)
                {
                    maxx = Math.max(maxx, points[0][i]);
                }
            }
            return maxx;
        }
        
        int maxx = 0;
        for(int i = 0; i <= 2; i++)
        {
            if(i != lastChoice)
            {
                int val = points[days][i] + helper(days-1, i, points,dp);
                maxx = Math.max(maxx, val);
            }
        }
        
        return dp[days][lastChoice] = maxx;
        
    }
    
    

/*-------------------------------------------------------------
                          STATIC CODE 
-------------------------------------------------------------*/

class Pair<K,V>{

    K key;
    V value;
    
    Pair()
    {
        this.key = null;
        this.value = null;
    }
    
    Pair(K key, V value)
    {
        this.key = key;
        this.value = value;
    }
    
    public void set(K key, V value)
    {
        this.key = key;
        this.value = value;
    }
    
    public K getKey()
    {
        return this.key;
    }
    
    public V getValue()
    {
        return this.value;
    }
    
}
    

    
    @SuppressWarnings("unchecked")
    static void print2DArray(int[][] arr)
    {
         System.out.println("[");
        for(int[] row : arr)
        {
            System.out.print("[ ");
            for(int i = 0; i < row.length; i++)
            {
                if(i == row.length-1)
                {
                    System.out.print(row[i]);
                }else{
                    System.out.print(row[i]+", ");
                }
            }
            System.out.println(" ],");
        }
        System.out.println("]");
    }
    
    
    @SuppressWarnings("unchecked")
    static<T> void print2DList(List<List<T>> list){
        System.out.println("[");
        for(List<T> lst : list)
        {
            System.out.print("[ ");
            for(int i = 0; i < lst.size(); i++)
            {
                if(i == lst.size()-1)
                {
                    System.out.print(lst.get(i));
                }else{
                    System.out.print(lst.get(i)+", ");
                }
            }
            System.out.println(" ],");
        }
        System.out.println("]");
    }
    
    
    
    @SuppressWarnings("unchecked")
    static<T> void printList(List<T> list)
    {
        System.out.print("[ ");
        for(int i = 0; i < list.size(); i++)
        {
            if(i == list.size()-1)
            {
                System.out.print(list.get(i));
            }else{
                System.out.print(list.get(i)+", ");
            }
        }
        System.out.println(" ]");
    }
    
    @SuppressWarnings("unchecked")
    static<T> void printnl(T val, T ...vals)
    {
       try{
        StringBuilder sb = new StringBuilder();
        sb.append(val);
        sb.append(" ");
        if(vals.length > 0)
        {
            
        
        for(T v : vals)
        {
            sb.append(" ");
            sb.append(v);
        }
        }
        System.out.print(sb.toString());
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }
    
    @SuppressWarnings("unchecked")
    static<T> void print(T val, T ...vals)
    {
        try{
        StringBuilder sb = new StringBuilder();
        sb.append(val);
        if(vals.length > 0)
        {
            
        
        for(T v : vals)
        {
            sb.append(" ");
            sb.append(v);
        }
        }
        System.out.println(sb.toString());
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }

}