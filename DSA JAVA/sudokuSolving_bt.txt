import java.util.*;
import java.lang.*;

class Main {
    public static void main(String[] args) {
        
        int n = 9;
        char[][] board = fillBoard();
        print("INPUT");
        print2DArray(board);
        solveSudoku(board, n);
        print("OUTPUT");
        print2DArray(board);
    }
    
    
    
    static char[][] fillBoard()
    {
         char[][] board= {
                    {'9', '5', '7', '.', '1', '3', '.', '8', '4'},
                    {'4', '8', '3', '.', '5', '7', '1', '.', '6'},
                    {'.', '1', '2', '.', '4', '9', '5', '3', '7'},
                    {'1', '7', '.', '3', '.', '4', '9', '.', '2'},
                    {'5', '.', '4', '9', '7', '.', '3', '6', '.'},
                    {'3', '.', '9', '5', '.', '8', '7', '.', '1'},
                    {'8', '4', '5', '7', '9', '.', '6', '1', '3'},
                    {'.', '9', '1', '.', '3', '6', '.', '7', '5'},
                    {'7', '.', '6', '1', '8', '5', '4', '.', '9'}
                    };
        return board;
    }
    
    static boolean solveSudoku(char[][] board, int n)
    {
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(board[i][j] == '.')
                {
                    for(char c='1' ; c<='9'; c++)
                    {
                        if(validate(board,i,j,c))
                        {
                            board[i][j] = c;
                            if(solveSudoku(board,n)){
                                return true;
                            }
                            else{
                            board[i][j] = '.';
                            }
                        }
                    }
                   return false;
                }
            }
        
        }
        return true;
    }
    
    static boolean validate(char[][] board, int r, int c, int x)
    {
        
        for(int i = 0; i < board[0].length; i++)
        {
            if(board[i][c] == x)
            {
                return false;
            }
            
            if(board[r][i] == x)
            {
                return false;
            }
            
            if(board[3 * (r/3) + i / 3][3 * (c/3) + i%3] == x)
            {
                return false;
            }
        }
        return true;
    }
    
    
    
    //---------------------- STATIC CODE--------------------------
    
    @SuppressWarnings("unchecked")
    static void print2DArray(char[][] arr)
    {
         System.out.println("[");
        for(char[] row : arr)
        {
            System.out.print("[ ");
            for(int i = 0; i < row.length; i++)
            {
                if(i == row.length-1)
                {
                    System.out.print(row[i]);
                }else{
                    System.out.print(row[i]+", ");
                }
            }
            System.out.println(" ],");
        }
        System.out.println("]");
    }
    
    @SuppressWarnings("unchecked")
    static<T> void print2DList(List<List<T>> list){
        System.out.println("[");
        for(List<T> lst : list)
        {
            System.out.print("[ ");
            for(int i = 0; i < lst.size(); i++)
            {
                if(i == list.size()-1)
                {
                    System.out.print(lst.get(i));
                }else{
                    System.out.print(lst.get(i)+", ");
                }
            }
            System.out.println(" ],");
        }
        System.out.println("]");
    }
    
    @SuppressWarnings("unchecked")
    static<T> void printList(List<T> list)
    {
        System.out.print("[ ");
        for(int i = 0; i < list.size(); i++)
        {
            if(i == list.size()-1)
            {
                System.out.print(list.get(i));
            }else{
                System.out.print(list.get(i)+", ");
            }
        }
        System.out.println(" ]");
    }
    
    @SuppressWarnings("unchecked")
    static<T> void print(T val, T ...vals)
    {
        try{
        StringBuilder sb = new StringBuilder();
        sb.append(val);
        if(vals.length > 0)
        {
            
        
        for(T v : vals)
        {
            sb.append(" ");
            sb.append(v);
        }
        }
        System.out.println(sb.toString());
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }

}